package com.example.heye.mocaculate5;

import android.bluetooth.BluetoothAdapter;
import android.bluetooth.BluetoothDevice;
import android.bluetooth.BluetoothSocket;
import android.content.Context;
import android.content.pm.ActivityInfo;
import android.graphics.Color;
import android.net.wifi.WifiInfo;
import android.net.wifi.WifiManager;
import android.os.Handler;
import android.os.Message;
import android.os.SystemClock;
import android.support.v7.app.AppCompatActivity;
import android.os.Bundle;
import android.util.Log;
import android.view.View;
import android.widget.Button;
import android.widget.Chronometer;
import android.widget.EditText;
import android.widget.ListView;
import android.widget.ProgressBar;
import android.widget.SeekBar;
import android.widget.TextView;
import android.widget.Toast;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.InetAddress;
import java.net.SocketException;
import java.net.UnknownHostException;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

import static android.os.Environment.getExternalStorageDirectory;

public class MainActivity extends AppCompatActivity {
    private static String LOG_TAG="移动计算5";
    DecimalFormat df3 = new DecimalFormat("###.00");
    public InetAddress GeneralAddress;
    Boolean busy=false;
    private DatagramSocket SenceSocket,TransSocket;
    private String address;
    public static final int DEFAULT_PORT = 43608;
    public static final int SENCE_PORT = 43607;
    private static final int MAX_DATA_PACKET_LENGTH = 120;
    private byte[] buffer = new byte[MAX_DATA_PACKET_LENGTH];
    File file = new File(getExternalStorageDirectory()+"/testSet1.txt");
    FileReader fileInputStream = null;
    DecimalFormat df1 = new DecimalFormat("####.00000");
    DecimalFormat df2 = new DecimalFormat("##.00");
    public ProgressBar progressBar;
    public Map<String,byte[]> buffered;
    public SeekBar seekBar;
    public Chronometer chronometer;
    public Handler handler;
    ArrayList<float []> trainSet1;
    float [] w1,oldw1;
    float alpha=(float)1;
    float train_loss;
    float b1,oldb1= 0;
    String w2;
    int lens = 0;
    long buff;
    InputStream is;
    ArrayList<Float> trainLoss1,trainLoss3;
    Button start;
    TextView textView1,textView2,textView3,text2;
    int send=0, receive=0,progress=0;
    @Override protected void onResume() {

        if(getRequestedOrientation()!=ActivityInfo.SCREEN_ORIENTATION_PORTRAIT){
            setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);
        }
        super.onResume();
    }
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        start = (Button)findViewById(R.id.start);
        trainLoss1 = new ArrayList<>();trainLoss3 = new ArrayList<>();
        textView1 = (TextView)findViewById(R.id.text1);
        textView2 = (TextView)findViewById(R.id.text2);
        textView3 = (TextView)findViewById(R.id.text3);
        text2= (TextView) findViewById(R.id.rate);
        chronometer = (Chronometer)findViewById(R.id.chronometer);
        seekBar = (SeekBar)findViewById(R.id.seekBar);
        progressBar = (ProgressBar)findViewById(R.id.progress);
        buffered = new HashMap<String,byte[]>();
        try {
            GeneralAddress = InetAddress.getByName("255.255.255.255");
            TransSocket = new DatagramSocket(DEFAULT_PORT);
            SenceSocket = new DatagramSocket(SENCE_PORT);
        }catch (UnknownHostException e) {      Log.e(LOG_TAG, e.toString());         }
        catch (SocketException e1){            Log.e(LOG_TAG, e1.toString());        }
        trainSet1 = new ArrayList<>();
        try {
            String line;
            BufferedReader bufferedReader =new BufferedReader(new FileReader(file));
            while((line=bufferedReader.readLine())!=null){

                String[] s = line.split("\t");
                if(s.length<=1) continue;
                Log.e("读到的行"+s.length,line);
                lens =s.length-1;
                float[] floats =new float[lens+1];
                for(int i =0;i<lens;i++){
                    floats[i]=Float.parseFloat(s[i]); }
                Log.e("Float.Float(s[lens]","--"+s[lens]+"--");
                if(Float.parseFloat(s[lens])==1.0f)
                    floats[lens] = 1.0f;
                else if(Float.parseFloat(s[lens])==0.0f)
                    floats[lens] = -1.0f;
                else                 Log.e("oncreate","读取错误");
                trainSet1.add(floats);
            }
            bufferedReader.close();
        }
        catch (IOException e){e.printStackTrace();
            Toast.makeText(this,"文件读取失败",Toast.LENGTH_SHORT).show();        Log.e("文件读取失败",getExternalStorageDirectory()+"/testSet1.txt");}
        handler  = new Handler() {
            @Override
            public void handleMessage(Message msg){
                switch (msg.what){
                    case 1:
                        Toast.makeText(MainActivity.this,"收到请求："+(String)msg.obj,Toast.LENGTH_LONG);busy=true;
                        chronometer.setBase(SystemClock.elapsedRealtime());
                        chronometer.start();start.setBackgroundColor(Color.BLUE);
                        new Thread(){@Override
                        public void run(){ caculate();}}.start();break;
                    case 2:
                        progressBar.setProgress(++progress); break;
                    case 3:
                        chronometer.stop();
                        textView3.setText("      "+(-chronometer.getBase()+SystemClock.elapsedRealtime()));
                        Toast.makeText(MainActivity.this,"w1="+df2.format(w1[0])+","+df2.format(w1[1])+"  b1="+df2.format(b1)+" loss"+df2.format(train_loss),Toast.LENGTH_LONG).show();
                        busy=false;  start.setBackgroundColor(Color.GREEN);                        break;
                    case 4:
                        textView2.setText("发送"+ (++send));break;
                    case 5:
                        textView1.setText("收到"+ (++receive));break;
                    case 6:
                        if(buff>=1000000)text2.setText("速率:"+((double)(buff/100000))/10+"MB/s");
                        else if(buff>=1000)text2.setText("速率:"+((double)(buff/100))/10+"KB/s");
                        else                text2.setText("速率:"+buff+"B/s");
                        buff=0;
                    default:break;
                }   }    };
        new Sence().start();
        new Absorb().start();
        new Thread() {
            public void run(){
                while (true){
                    try{sleep(1000);}catch (Exception e){Log.e(LOG_TAG,e.toString());}
                    Message msg = new Message();
                    msg.what = 6;
                    handler.sendMessage(msg);                }
            }}.start();}
    private class Sence extends Thread{
        DatagramPacket datagramPacket=new DatagramPacket(new byte[4],4);
        public void run(){
                try{while (true){
                    if(busy)continue;
                    SenceSocket.receive(datagramPacket);
                    if(datagramPacket.getAddress().getHostAddress().equals(getLocalIPAddress()))continue;
                    Message message = new Message();message.what=1;message.obj=datagramPacket.getAddress().getHostAddress();handler.sendMessage(message);
                }                   }
                catch (IOException e){Log.e(LOG_TAG,"接收开始请求失败");            }}    }
    public class Absorb extends Thread{
        byte[] buffer = new byte[1024];
        DatagramPacket datagramPacket = new DatagramPacket(buffer,1024,GeneralAddress,DEFAULT_PORT);
        public void run(){
            try {
                while(true){
                    if(busy){
                        TransSocket.receive(datagramPacket);
                        if(datagramPacket.getAddress().getHostAddress().equals(getLocalIPAddress()))continue;
                        buff+=datagramPacket.getData().length;
                        buffered.put(datagramPacket.getAddress().getHostName(),datagramPacket.getData());                    }}
            } catch (IOException e1) {
                e1.printStackTrace();Log.e("average","接收错误");
        }                }    }
    public void Average(){
        StringBuilder w0 = new StringBuilder();
        float[] addw1 =new float[w1.length];
        for(int i=0;i<w1.length;i++)
            addw1[i]=w1[i];
        for(float res: addw1){
            w0.append(df1.format(res)+"\t");
        }
        w0.append(df1.format(b1)+"\t");
        Log.e("广播的W2",w0.toString());
        DatagramPacket datagramPacket = new DatagramPacket(w0.toString().getBytes(),w0.toString().getBytes().length,GeneralAddress,DEFAULT_PORT);
        try{
            TransSocket.send(datagramPacket);
            Message message = new Message();message.what = 4;handler.sendMessage(message);}
        catch (IOException e){e.printStackTrace();
            Log.e("average","发回错误");}
        int processers = buffered.size()+1;
        b1/=processers;for(int j=0;j<w1.length;j++) {w1[j]/=processers;}
        for(Map.Entry<String, byte[]> entry:buffered.entrySet()){
            byte[] s = Arrays.copyOfRange(entry.getValue(), 0, entry.getValue().length-2);
            w2 = new String(s);Log.e("收到的W2",w2);
            String[] bs = w2.split("\t");
            int i=0;
            for(i=0;i<w1.length;i++)
                w1[i]+=Float.parseFloat(bs[i])/processers;
            b1+=Float.parseFloat(bs[i])/processers;
            Message message = new Message();message.what = 5;handler.sendMessage(message);            }
        buffered.clear();}
    public void caculate(){
        w1 = new float[lens];oldw1=new float[lens];
        b1 = 0;progress=0;
        for(int i=0 ;i<50;i++){
            trainMLP_1(seekBar.getProgress());
            Average();
            Message message = new Message();message.what = 2;handler.sendMessage(message);
        }
        Message message = new Message();message.what = 3;handler.sendMessage(message);
    }
    public float calDistance1(float[] sample){
        float res = 0;
        int i = 0;
        for (i=0;i<=(sample.length-2);i++)
            res += sample[i]*w1[i];
        res += b1;
        res *= (int)(sample[sample.length-1]);
        return res;
    }
    public void updateParm1(float[] sample){
        int i=0;
        for(i=0;i<=lens-1;i++)
            w1[i] = w1[i] + alpha*(1/sample[lens])*sample[i];
        b1 = b1 + alpha*sample[lens];
    }
    public void  trainMLP_1(int Iter){
        int i;float res;
        boolean update;
        Log.e("training MLP...","--------------------------");
        int epoch = 0;
        for (i=0;i<=Iter;i++){
            train_loss =0;
            update = false;
            Log.e( "epoch"+epoch+" "," w:"+w1[0]+","+w1[1]+"b:"+b1) ;
            for(float[] sample:trainSet1){
                res = calDistance1(sample);
                if (res <= 0){
                    train_loss += -res;
                    update = true;
                    updateParm1(sample);
                }
            }
            if (update)
                epoch = epoch+1;
            else{
                Log.e("training convergenced,","stop trianing");
                Log.e("Optimum W:"+w1[0]+","+w1[1]," Optimum b:"+b1);
                break;
            }
            update = false;
            if(trainLoss3.size()<50)
            trainLoss3.add(train_loss);
        }
        Log.e("train loss:",""+train_loss);
        trainLoss1.add(train_loss);
    }
    public void start(View view){
        if(busy){Toast.makeText(this,"手机正忙",Toast.LENGTH_SHORT).show();}
        else{
        start.setBackgroundColor(Color.YELLOW);busy=true;
        chronometer.setBase(SystemClock.elapsedRealtime());
        chronometer.start();
        new Thread(){@Override
            public void run(){
            try{SenceSocket.send(new DatagramPacket(new byte[1],1, GeneralAddress,SENCE_PORT));}
            catch (IOException e){Log.e(LOG_TAG,e.toString());}
            caculate();
            File file2 = new File(getExternalStorageDirectory()+"/trainloss.txt");
            try{
                FileOutputStream fileOutputStream = new FileOutputStream(file2);
                for(int p=0;p<50;p++){
                    Log.e(LOG_TAG,df3.format(trainLoss1.get(p)));
                    fileOutputStream.write((df3.format(trainLoss1.get(p))+"\t").getBytes());}
                //fileOutputStream.write(stringBuilder.toString().getBytes());
                fileOutputStream.close();}
            catch (Exception e){Log.e(LOG_TAG,e.toString());            }
            File file3 = new File(getExternalStorageDirectory()+"/trainloss3.txt");
            try{
                FileOutputStream fileOutputStream = new FileOutputStream(file3);
                for(int p=0;p<50;p++){
                    Log.e(LOG_TAG,df3.format(trainLoss3.get(p)));
                    fileOutputStream.write((df3.format(trainLoss3.get(p))+"\t").getBytes());}
                //fileOutputStream.write(stringBuilder.toString().getBytes());
                fileOutputStream.close();}
            catch (Exception e){Log.e(LOG_TAG,e.toString());            }
        trainLoss1.clear();trainLoss3.clear();}
        }.start();    }
}
    public String getLocalIPAddress(){
        WifiManager wifiManager = (WifiManager)MainActivity.this.getApplicationContext().getSystemService(Context.WIFI_SERVICE);
        WifiInfo wifiInfo = wifiManager.getConnectionInfo();
        int ipAddress = wifiInfo.getIpAddress();
        //  Log.d(Tag, "int ip "+ipAddress);
        if(ipAddress==0)return null;
        return ((ipAddress & 0xff)+"."+(ipAddress>>8 & 0xff)+"."
                +(ipAddress>>16 & 0xff)+"."+(ipAddress>>24 & 0xff));
    }
}
